// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: model.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationEnum int32

const (
	OperationEnum_sum OperationEnum = 0
	OperationEnum_min OperationEnum = 1
	OperationEnum_max OperationEnum = 2
	OperationEnum_avg OperationEnum = 3
	OperationEnum_cnt OperationEnum = 4
)

// Enum value maps for OperationEnum.
var (
	OperationEnum_name = map[int32]string{
		0: "sum",
		1: "min",
		2: "max",
		3: "avg",
		4: "cnt",
	}
	OperationEnum_value = map[string]int32{
		"sum": 0,
		"min": 1,
		"max": 2,
		"avg": 3,
		"cnt": 4,
	}
)

func (x OperationEnum) Enum() *OperationEnum {
	p := new(OperationEnum)
	*p = x
	return p
}

func (x OperationEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[0].Descriptor()
}

func (OperationEnum) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[0]
}

func (x OperationEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationEnum.Descriptor instead.
func (OperationEnum) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0}
}

type FrameType int32

const (
	FrameType__            FrameType = 0
	FrameType_FT_SAMPLE    FrameType = 1
	FrameType_FT_STATE     FrameType = 2
	FrameType_FT_LOG       FrameType = 3
	FrameType_FT_EVENT     FrameType = 4
	FrameType_FT_OTA       FrameType = 5
	FrameType_FT_HEARTBEAT FrameType = 6
	FrameType_FT_BOOT      FrameType = 7
	FrameType_FT_ORIENT    FrameType = 8
	FrameType_FT_KEY_N     FrameType = 9
	FrameType_FT_KEY_KK    FrameType = 10
	FrameType_FT_KEY_XX    FrameType = 11
)

// Enum value maps for FrameType.
var (
	FrameType_name = map[int32]string{
		0:  "_",
		1:  "FT_SAMPLE",
		2:  "FT_STATE",
		3:  "FT_LOG",
		4:  "FT_EVENT",
		5:  "FT_OTA",
		6:  "FT_HEARTBEAT",
		7:  "FT_BOOT",
		8:  "FT_ORIENT",
		9:  "FT_KEY_N",
		10: "FT_KEY_KK",
		11: "FT_KEY_XX",
	}
	FrameType_value = map[string]int32{
		"_":            0,
		"FT_SAMPLE":    1,
		"FT_STATE":     2,
		"FT_LOG":       3,
		"FT_EVENT":     4,
		"FT_OTA":       5,
		"FT_HEARTBEAT": 6,
		"FT_BOOT":      7,
		"FT_ORIENT":    8,
		"FT_KEY_N":     9,
		"FT_KEY_KK":    10,
		"FT_KEY_XX":    11,
	}
)

func (x FrameType) Enum() *FrameType {
	p := new(FrameType)
	*p = x
	return p
}

func (x FrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[1].Descriptor()
}

func (FrameType) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[1]
}

func (x FrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameType.Descriptor instead.
func (FrameType) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{1}
}

type DeviceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FrameType FrameType `protobuf:"varint,2,opt,name=FrameType,proto3,enum=FrameType" json:"FrameType,omitempty"`
}

func (x *DeviceInput) Reset() {
	*x = DeviceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInput) ProtoMessage() {}

func (x *DeviceInput) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInput.ProtoReflect.Descriptor instead.
func (*DeviceInput) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInput) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceInput) GetFrameType() FrameType {
	if x != nil {
		return x.FrameType
	}
	return FrameType__
}

type DeviceIdInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeviceIdInput) Reset() {
	*x = DeviceIdInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIdInput) ProtoMessage() {}

func (x *DeviceIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIdInput.ProtoReflect.Descriptor instead.
func (*DeviceIdInput) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceIdInput) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type               int32                 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	HardwareId         string                `protobuf:"bytes,3,opt,name=HardwareId,proto3" json:"HardwareId,omitempty"`
	FirmwareId         string                `protobuf:"bytes,4,opt,name=FirmwareId,proto3" json:"FirmwareId,omitempty"`
	BridgeId           int64                 `protobuf:"varint,5,opt,name=BridgeId,proto3" json:"BridgeId,omitempty"`
	UserId             int32                 `protobuf:"varint,16,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Timezone           string                `protobuf:"bytes,17,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
	SampleMultiplier   float32               `protobuf:"fixed32,6,opt,name=SampleMultiplier,proto3" json:"SampleMultiplier,omitempty"`
	Settings           string                `protobuf:"bytes,7,opt,name=Settings,proto3" json:"Settings,omitempty"`
	TsSchemaVer        int32                 `protobuf:"varint,8,opt,name=TsSchemaVer,proto3" json:"TsSchemaVer,omitempty"`
	LastSeen           int32                 `protobuf:"varint,9,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	LastNode           string                `protobuf:"bytes,10,opt,name=LastNode,proto3" json:"LastNode,omitempty"`
	LastSampleValue    int64                 `protobuf:"varint,11,opt,name=LastSampleValue,proto3" json:"LastSampleValue,omitempty"`
	LastSampleDateTime int32                 `protobuf:"varint,12,opt,name=LastSampleDateTime,proto3" json:"LastSampleDateTime,omitempty"`
	Connected          int32                 `protobuf:"varint,13,opt,name=Connected,proto3" json:"Connected,omitempty"`
	AxisCalibration    string                `protobuf:"bytes,14,opt,name=AxisCalibration,proto3" json:"AxisCalibration,omitempty"`
	DeviceRules        map[int32]*DeviceRule `protobuf:"bytes,15,rep,name=DeviceRules,proto3" json:"DeviceRules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{2}
}

func (x *Device) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Device) GetHardwareId() string {
	if x != nil {
		return x.HardwareId
	}
	return ""
}

func (x *Device) GetFirmwareId() string {
	if x != nil {
		return x.FirmwareId
	}
	return ""
}

func (x *Device) GetBridgeId() int64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *Device) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Device) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Device) GetSampleMultiplier() float32 {
	if x != nil {
		return x.SampleMultiplier
	}
	return 0
}

func (x *Device) GetSettings() string {
	if x != nil {
		return x.Settings
	}
	return ""
}

func (x *Device) GetTsSchemaVer() int32 {
	if x != nil {
		return x.TsSchemaVer
	}
	return 0
}

func (x *Device) GetLastSeen() int32 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *Device) GetLastNode() string {
	if x != nil {
		return x.LastNode
	}
	return ""
}

func (x *Device) GetLastSampleValue() int64 {
	if x != nil {
		return x.LastSampleValue
	}
	return 0
}

func (x *Device) GetLastSampleDateTime() int32 {
	if x != nil {
		return x.LastSampleDateTime
	}
	return 0
}

func (x *Device) GetConnected() int32 {
	if x != nil {
		return x.Connected
	}
	return 0
}

func (x *Device) GetAxisCalibration() string {
	if x != nil {
		return x.AxisCalibration
	}
	return ""
}

func (x *Device) GetDeviceRules() map[int32]*DeviceRule {
	if x != nil {
		return x.DeviceRules
	}
	return nil
}

type DeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type   int32            `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	States map[string]int32 `protobuf:"bytes,3,rep,name=States,proto3" json:"States,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceState) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceState) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DeviceState) GetStates() map[string]int32 {
	if x != nil {
		return x.States
	}
	return nil
}

type DeviceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64     `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FrameType          FrameType `protobuf:"varint,2,opt,name=FrameType,proto3,enum=FrameType" json:"FrameType,omitempty"`
	LastSeen           int32     `protobuf:"varint,3,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	LastNode           string    `protobuf:"bytes,4,opt,name=LastNode,proto3" json:"LastNode,omitempty"`
	Connected          int32     `protobuf:"varint,5,opt,name=Connected,proto3" json:"Connected,omitempty"`
	LastSampleValue    int64     `protobuf:"varint,6,opt,name=LastSampleValue,proto3" json:"LastSampleValue,omitempty"`
	LastSampleDateTime string    `protobuf:"bytes,7,opt,name=LastSampleDateTime,proto3" json:"LastSampleDateTime,omitempty"`
	// Frame type (Calibration)
	AxisCalibration string `protobuf:"bytes,8,opt,name=AxisCalibration,proto3" json:"AxisCalibration,omitempty"`
	// Frame type (Boot)
	FirmwareId string `protobuf:"bytes,9,opt,name=FirmwareId,proto3" json:"FirmwareId,omitempty"`
	BridgeId   int64  `protobuf:"varint,10,opt,name=BridgeId,proto3" json:"BridgeId,omitempty"`
}

func (x *DeviceUpdate) Reset() {
	*x = DeviceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUpdate) ProtoMessage() {}

func (x *DeviceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUpdate.ProtoReflect.Descriptor instead.
func (*DeviceUpdate) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceUpdate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceUpdate) GetFrameType() FrameType {
	if x != nil {
		return x.FrameType
	}
	return FrameType__
}

func (x *DeviceUpdate) GetLastSeen() int32 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *DeviceUpdate) GetLastNode() string {
	if x != nil {
		return x.LastNode
	}
	return ""
}

func (x *DeviceUpdate) GetConnected() int32 {
	if x != nil {
		return x.Connected
	}
	return 0
}

func (x *DeviceUpdate) GetLastSampleValue() int64 {
	if x != nil {
		return x.LastSampleValue
	}
	return 0
}

func (x *DeviceUpdate) GetLastSampleDateTime() string {
	if x != nil {
		return x.LastSampleDateTime
	}
	return ""
}

func (x *DeviceUpdate) GetAxisCalibration() string {
	if x != nil {
		return x.AxisCalibration
	}
	return ""
}

func (x *DeviceUpdate) GetFirmwareId() string {
	if x != nil {
		return x.FirmwareId
	}
	return ""
}

func (x *DeviceUpdate) GetBridgeId() int64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

type DeviceRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*DeviceRule `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
}

func (x *DeviceRules) Reset() {
	*x = DeviceRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRules) ProtoMessage() {}

func (x *DeviceRules) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRules.ProtoReflect.Descriptor instead.
func (*DeviceRules) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceRules) GetRules() []*DeviceRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type DeviceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32         `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Active          int32         `protobuf:"varint,2,opt,name=Active,proto3" json:"Active,omitempty"`
	Type            int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	DeviceId        int64         `protobuf:"varint,4,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	Bucket          int32         `protobuf:"varint,5,opt,name=Bucket,proto3" json:"Bucket,omitempty"`
	BucketCount     int32         `protobuf:"varint,6,opt,name=BucketCount,proto3" json:"BucketCount,omitempty"`
	Property        string        `protobuf:"bytes,7,opt,name=Property,proto3" json:"Property,omitempty"`
	SinceDateTime   int32         `protobuf:"varint,8,opt,name=SinceDateTime,proto3" json:"SinceDateTime,omitempty"`
	UntilDateTime   int32         `protobuf:"varint,9,opt,name=UntilDateTime,proto3" json:"UntilDateTime,omitempty"`
	Comparison      string        `protobuf:"bytes,10,opt,name=Comparison,proto3" json:"Comparison,omitempty"`
	GroupMultiplier int32         `protobuf:"varint,11,opt,name=GroupMultiplier,proto3" json:"GroupMultiplier,omitempty"`
	Operation       OperationEnum `protobuf:"varint,12,opt,name=Operation,proto3,enum=OperationEnum" json:"Operation,omitempty"`
	Value           float32       `protobuf:"fixed32,13,opt,name=Value,proto3" json:"Value,omitempty"`
	LastTrigger     int32         `protobuf:"varint,14,opt,name=LastTrigger,proto3" json:"LastTrigger,omitempty"`   //R/W
	NextEval        int32         `protobuf:"varint,15,opt,name=NextEval,proto3" json:"NextEval,omitempty"`         //R/W
	NextEvalSecs    int32         `protobuf:"varint,16,opt,name=NextEvalSecs,proto3" json:"NextEvalSecs,omitempty"` //R/W
}

func (x *DeviceRule) Reset() {
	*x = DeviceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRule) ProtoMessage() {}

func (x *DeviceRule) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRule.ProtoReflect.Descriptor instead.
func (*DeviceRule) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceRule) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceRule) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *DeviceRule) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DeviceRule) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceRule) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *DeviceRule) GetBucketCount() int32 {
	if x != nil {
		return x.BucketCount
	}
	return 0
}

func (x *DeviceRule) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *DeviceRule) GetSinceDateTime() int32 {
	if x != nil {
		return x.SinceDateTime
	}
	return 0
}

func (x *DeviceRule) GetUntilDateTime() int32 {
	if x != nil {
		return x.UntilDateTime
	}
	return 0
}

func (x *DeviceRule) GetComparison() string {
	if x != nil {
		return x.Comparison
	}
	return ""
}

func (x *DeviceRule) GetGroupMultiplier() int32 {
	if x != nil {
		return x.GroupMultiplier
	}
	return 0
}

func (x *DeviceRule) GetOperation() OperationEnum {
	if x != nil {
		return x.Operation
	}
	return OperationEnum_sum
}

func (x *DeviceRule) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DeviceRule) GetLastTrigger() int32 {
	if x != nil {
		return x.LastTrigger
	}
	return 0
}

func (x *DeviceRule) GetNextEval() int32 {
	if x != nil {
		return x.NextEval
	}
	return 0
}

func (x *DeviceRule) GetNextEvalSecs() int32 {
	if x != nil {
		return x.NextEvalSecs
	}
	return 0
}

type DeviceRuleUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DeviceId     int64 `protobuf:"varint,2,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	LastTrigger  int32 `protobuf:"varint,3,opt,name=LastTrigger,proto3" json:"LastTrigger,omitempty"`
	NextEval     int32 `protobuf:"varint,4,opt,name=NextEval,proto3" json:"NextEval,omitempty"`
	NextEvalSecs int32 `protobuf:"varint,5,opt,name=NextEvalSecs,proto3" json:"NextEvalSecs,omitempty"`
}

func (x *DeviceRuleUpdate) Reset() {
	*x = DeviceRuleUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRuleUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRuleUpdate) ProtoMessage() {}

func (x *DeviceRuleUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRuleUpdate.ProtoReflect.Descriptor instead.
func (*DeviceRuleUpdate) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceRuleUpdate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceRuleUpdate) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceRuleUpdate) GetLastTrigger() int32 {
	if x != nil {
		return x.LastTrigger
	}
	return 0
}

func (x *DeviceRuleUpdate) GetNextEval() int32 {
	if x != nil {
		return x.NextEval
	}
	return 0
}

func (x *DeviceRuleUpdate) GetNextEvalSecs() int32 {
	if x != nil {
		return x.NextEvalSecs
	}
	return 0
}

type BridgeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	C1 int32 `protobuf:"varint,2,opt,name=C1,proto3" json:"C1,omitempty"`
	C2 int32 `protobuf:"varint,3,opt,name=C2,proto3" json:"C2,omitempty"`
}

func (x *BridgeState) Reset() {
	*x = BridgeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeState) ProtoMessage() {}

func (x *BridgeState) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeState.ProtoReflect.Descriptor instead.
func (*BridgeState) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{8}
}

func (x *BridgeState) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BridgeState) GetC1() int32 {
	if x != nil {
		return x.C1
	}
	return 0
}

func (x *BridgeState) GetC2() int32 {
	if x != nil {
		return x.C2
	}
	return 0
}

type SensorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	C1 int32 `protobuf:"varint,2,opt,name=C1,proto3" json:"C1,omitempty"`
	C2 int32 `protobuf:"varint,3,opt,name=C2,proto3" json:"C2,omitempty"`
}

func (x *SensorState) Reset() {
	*x = SensorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorState) ProtoMessage() {}

func (x *SensorState) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorState.ProtoReflect.Descriptor instead.
func (*SensorState) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{9}
}

func (x *SensorState) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SensorState) GetC1() int32 {
	if x != nil {
		return x.C1
	}
	return 0
}

func (x *SensorState) GetC2() int32 {
	if x != nil {
		return x.C2
	}
	return 0
}

var File_model_proto protoreflect.FileDescriptor

var file_model_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a,
	0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x89, 0x05, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x41, 0x78, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x78, 0x69, 0x73, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x78, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x78, 0x69, 0x73, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xf6, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x73, 0x22, 0x3d, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x43, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x43, 0x32, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x43,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x43,
	0x32, 0x2a, 0x3c, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x61, 0x76, 0x67, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x10, 0x04, 0x2a,
	0xaf, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x54, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x54, 0x5f, 0x4f, 0x54, 0x41, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x54, 0x5f, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x54, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x54, 0x5f, 0x4f, 0x52, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4e, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4b, 0x4b,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x58, 0x58, 0x10,
	0x0b, 0x32, 0x2b, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x07, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_model_proto_rawDescOnce sync.Once
	file_model_proto_rawDescData = file_model_proto_rawDesc
)

func file_model_proto_rawDescGZIP() []byte {
	file_model_proto_rawDescOnce.Do(func() {
		file_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_proto_rawDescData)
	})
	return file_model_proto_rawDescData
}

var file_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_model_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_model_proto_goTypes = []interface{}{
	(OperationEnum)(0),       // 0: OperationEnum
	(FrameType)(0),           // 1: FrameType
	(*DeviceInput)(nil),      // 2: DeviceInput
	(*DeviceIdInput)(nil),    // 3: DeviceIdInput
	(*Device)(nil),           // 4: Device
	(*DeviceState)(nil),      // 5: DeviceState
	(*DeviceUpdate)(nil),     // 6: DeviceUpdate
	(*DeviceRules)(nil),      // 7: DeviceRules
	(*DeviceRule)(nil),       // 8: DeviceRule
	(*DeviceRuleUpdate)(nil), // 9: DeviceRuleUpdate
	(*BridgeState)(nil),      // 10: BridgeState
	(*SensorState)(nil),      // 11: SensorState
	nil,                      // 12: Device.DeviceRulesEntry
	nil,                      // 13: DeviceState.StatesEntry
}
var file_model_proto_depIdxs = []int32{
	1,  // 0: DeviceInput.FrameType:type_name -> FrameType
	12, // 1: Device.DeviceRules:type_name -> Device.DeviceRulesEntry
	13, // 2: DeviceState.States:type_name -> DeviceState.StatesEntry
	1,  // 3: DeviceUpdate.FrameType:type_name -> FrameType
	8,  // 4: DeviceRules.Rules:type_name -> DeviceRule
	0,  // 5: DeviceRule.Operation:type_name -> OperationEnum
	8,  // 6: Device.DeviceRulesEntry.value:type_name -> DeviceRule
	2,  // 7: Cache.GetDevice:input_type -> DeviceInput
	4,  // 8: Cache.GetDevice:output_type -> Device
	8,  // [8:9] is the sub-list for method output_type
	7,  // [7:8] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_model_proto_init() }
func file_model_proto_init() {
	if File_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIdInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRuleUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_model_proto_goTypes,
		DependencyIndexes: file_model_proto_depIdxs,
		EnumInfos:         file_model_proto_enumTypes,
		MessageInfos:      file_model_proto_msgTypes,
	}.Build()
	File_model_proto = out.File
	file_model_proto_rawDesc = nil
	file_model_proto_goTypes = nil
	file_model_proto_depIdxs = nil
}
